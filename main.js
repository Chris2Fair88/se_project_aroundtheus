!function(){"use strict";class e{constructor(e,t,s,r,o){let{name:n,link:i,_id:a,isLiked:l}=e;this._name=n,this._link=i,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteCard=r,this._handleLikeClick=o,this._cardId=a,this._likeButton=null,this._isLiked=l}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like-button"),this._likeButton.addEventListener("click",(()=>{this._likeButton.classList.toggle("card__like-button_active"),this._handleLikeClick(this)})),this._cardElement.querySelector(".cards__delete-button").addEventListener("click",(()=>{this._handleDeleteCard(this)})),this._cardImageEl.addEventListener("click",(()=>this._handleImageClick(this._name,this._link)))}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardtitleEl=this._cardElement.querySelector(".card__title"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._cardtitleEl.textContent=this._name,this._setEventListeners(),this._cardElement}getId(){return this._cardId}deleteCard(){this._cardElement.remove()}isLiked(){return this._isLiked}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_toggleButtonState(){let e=!1;this._inputList.forEach((t=>{t.validity.valid||(e=!0)})),e?this.disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputList=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}}class s{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t)}open(e){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),this._modalElement.addEventListener("click",this._handleCloseOverlay)}close(e){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose),this._modalElement.removeEventListener("click",this._handleCloseOverlay)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleCloseOverlay=e=>{e.target.classList.contains("modal_opened")&&this.close()};setEventListeners(){this._modalElement.querySelector(".modal__close").addEventListener("click",(()=>{this.close()}))}}class r extends s{constructor(e,t){super({modalSelector:e}),this._handleFormSubmit=t,this._form=this._modalElement.querySelector(".modal__form"),this._submitButton=this._form.querySelector(".modal__button"),this._submitButtonTextContent=this._submitButton.textContent}_getInputValues(){return this._inputList=this._modalElement.querySelectorAll(".modal__input"),this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonTextContent}}const o=document.querySelector("#profile-edit-button"),n=document.querySelector("#profile-edit-modal"),i=(document.querySelector("#modal-close-button"),document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector("#profile-title-input")),a=document.querySelector("#profile-description-input"),l=n.querySelector(".modal__form"),c=document.querySelector(".profile__image-edit"),d=document.querySelector(".profile__add-button"),u=document.querySelector("#add-card-modal"),m=(document.querySelector("#add-image-close-button"),document.querySelector(".modal__input_type_title"),document.querySelector(".modal__input_type_url"),document.querySelector("#image-title-input"),document.querySelector("#image-description-input"),document.querySelector(".cards__list"),u.querySelector(".modal__form")),h=(document.querySelector("#card-image-modal"),document.querySelector(".modal__image"),document.querySelector(".modal__description"),document.querySelector("#image-modal-close-button"),{inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}),_=new class{constructor(e,t,s){this._nameElement=document.querySelector(e),this._descriptionElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._descriptionElement.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=s}setAvatar(e){this._avatarElement.src=e}}(".profile__title",".profile__description",".profile__image"),p=new class extends s{constructor(e){super({modalSelector:e}),this._modalImage=this._modalElement.querySelector(".modal__image"),this._modalTitle=this._modalElement.querySelector(".modal__description")}open(e){this._modalImage.src=e.link,this._modalImage.alt=e.name,this._modalTitle.textContent=e.name,super.open()}}("#card-image-modal");function E(e,t){const s={name:e,link:t};p.open(s)}function f(e){y.open(),y.setSubmitFunc((()=>{C.deleteCard(e.getId()).then((()=>{e.deleteCard(),y.close()})).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error("An error occurred while trying to delete the card: ${err}")}))}))}function v(e){!0===e.isLiked()?C.addLike(e.getId()).then((e=>{})).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)})):C.deleteLike(e.getId()).then((e=>{})).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}o.addEventListener("click",(()=>{const e=_.getUserInfo();i.value=e.name,a.value=e.job})),p.setEventListeners();const g=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:" https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:" https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:b},".cards__list");function b(t){const s=new e(t,"#card-template",E,f,v).getView();g.addItem(s)}const S=new r("#add-card-modal",(e=>{S.setLoading(!0);const t={name:e.title,link:e.url};C.createNewCard(t).then((e=>{b(e),S.close(),m.reset(),L.disableButton()})).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)})).finally((()=>{S.setLoading(!1)}))}));S.setEventListeners(),d.addEventListener("click",(()=>{S.open()}));const k=new r("#profile-edit-modal",(e=>{k.setLoading(!0),C.setProfileInfo({name:e.title,about:e.description}).then((e=>{_.setUserInfo({name:e.name,description:e.about}),l.reset(),k.close()})).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).finally((()=>{k.setLoading(!1)}))})),y=new class extends s{constructor(e){super({modalSelector:e}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._submitButton=this._modalForm.querySelector(".modal__button"),this._submitButtonTextContent=this._submitButton.textContent}setSubmitFunc(e){this._SubmitFunc=e}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._SubmitFunc()}))}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonTextContent}}("#delete-card-modal");y.setEventListeners(),k.setEventListeners(),o.addEventListener("click",(()=>{k.open()}));const L=new t(h,m);L.enableValidation(),new t(h,l).enableValidation();const C=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}createNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setProfileInfo(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getAppInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"34309ff6-916f-42f6-9f50-594fbb533e2c","Content-Type":"application/json"}});C.getInitialCards().then((e=>{g.renderItems(e)})).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)})),C.getUserInfo().then((e=>{_.setUserInfo({name:e.name,description:e.about}),_.setAvatar(e.avatar)})).catch((e=>{console.error(e)}));const j=new r("#avatar-edit-modal",(e=>{j.setLoading(!0),C.setAvatar(e.avatar).then((e=>{_.setAvatar(e.avatar),j.close()})).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)})).finally((()=>{j.setLoading(!1)}))}));j.setEventListeners(),c.addEventListener("click",(()=>{j.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,